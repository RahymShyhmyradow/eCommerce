import { useRouter } from 'next/router'
import React, { useEffect, useRef, useState } from 'react'
import Button from "@material-tailwind/react/Button";
import Tooltips from "@material-tailwind/react/Tooltips";
import TooltipsContent from "@material-tailwind/react/TooltipsContent";
import { TiTrash } from "react-icons/ti";
import Head from 'next/head';
import { useDispatch, useSelector } from 'react-redux';
import { addItemToCart, delItemToCart } from '../features/cart/cartSlice';
import src from '../img/6-shopping-solid.gif'
import H3 from "@material-tailwind/react/Heading3";
import { Flip, toast, ToastContainer } from 'react-toastify';
import Modal from "@material-tailwind/react/Modal";
import ModalHeader from "@material-tailwind/react/ModalHeader";
import ModalBody from "@material-tailwind/react/ModalBody";
import ModalFooter from "@material-tailwind/react/ModalFooter";
import Input from "@material-tailwind/react/Input";
import Textarea from "@material-tailwind/react/Textarea";
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup'
import { Controller, useForm } from 'react-hook-form';

export default function Product() {
    const [showModal, setShowModal] = useState(false);
    const buttonRef = useRef();
    const cartItems = useSelector(state => state.cart.cartItems)
    const dispatch = useDispatch()

    const schema = yup
        .object()
        .shape({
            name: yup.string().required('name error').min(3, 'minimum 3 simbol'),
            phone: yup
                .string()
                .matches(/^[0-9]+$/, 'only number')
                .min(8, 'minimum 8 simbol')
                .max(8, 'maximum 8 simbol')
                .required('phone number'),
            address: yup.string().required('error address').min(10, 'minimum 10 simbol'),
        })
        .required('formany doldur')
    const { handleSubmit, control, formState: { errors } } = useForm({ resolver: yupResolver(schema) });
    const cart = []
    const OrderShop = async (user) => {
        // cart.push({"about":e})
        setShowModal(false)
        // http://localhost:3000/api/products
        // http://192.168.101.133:8080/users/api_register
        cartItems.map(r => cart.push({ 'id': r.product.id, 'quantity': r.quantity }))
        const response = await fetch('http://192.168.101.133:8080/users/api/register', {
            method: 'POST',
            // body: JSON.stringify({ 'users': e, 'products': cart }),
            body: JSON.stringify({
                "name":"Rahym",
                "phone":"213213",
                "address":"dsfsdf"
            }),
            headers: {
                "Accept": "application/json",
                'Content-Type': 'application/json',
            },
        });
        if (response.status == 200) {
            toast.success("The order was successfully!!!", { position: 'bottom-left' })
        }
    }
    return (
        <div>
            <Head>
                <title>RB Shopping | cart</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className='container mx-auto flex justify-center flex-col'>

                {
                    cartItems.length === 0 && <div className='container h-screen flex flex-col justify-center items-center mx-auto'>
                        <p className='pt-20'><H3 color="blueGray">No Products</H3></p>
                        <img src={src.src} className='my-10' />
                    </div>
                }
                {
                    cartItems.map((e, k) => (
                        <div className='md:my-10 my-5 flex md:flex-row flex-col md:mx-0 mx-2'>
                            <ToastContainer
                                position="top-right"
                                autoClose={1900}
                                hideProgressBar={false}
                                newestOnTop={false}
                                closeOnClick
                                rtl={false}
                                pauseOnFocusLoss
                                draggable
                                pauseOnHover
                                transition={Flip} />
                            <div className='md:w-1/2 w-full'>
                                <img src={e.product.src} className='w-full h-full' />
                            </div>
                            <div className='md:ml-10 m-0 text-white flex flex-col justify-center'>
                                <p className='text-3xl'>{e.product.title}</p>
                                <p className='md:my-5 my-1'>{e.product.body}</p>
                                <p className='text-red-500 font-bold'>{e.product.price * e.quantity}$</p>
                                <div className='flex justify-between items-center md:mt-5 mt-1'>
                                    {/* <QuantityItem quantity={e.quantity} setQuantity={setQuantity} /> */}

                                    <div className='md:my-5 my-2'>
                                        <div className='flex items-center'>
                                            <Button color="lightBlue" buttonType="filled" size="sm" rounded={false} block={false} iconOnly={false} ripple="light">
                                                <p onClick={() => { cartItems[k].quantity > 1 && dispatch(addItemToCart({ 'product': cartItems[k].product, 'quantity': cartItems[k].quantity - 1 })) }} className='text-xl'>-</p>
                                            </Button>
                                            <p className='mx-5'>{e.quantity}</p>
                                            <Button color="lightBlue" buttonType="filled" size="sm" rounded={false} block={false} iconOnly={false} ripple="light">
                                                <p onClick={() => dispatch(addItemToCart({ 'product': cartItems[k].product, 'quantity': cartItems[k].quantity + 1 }))} className='text-xl'>+</p>
                                            </Button>
                                        </div>
                                    </div>

                                    <Button color="lightBlue" ref={buttonRef} ripple="light">
                                        <p className='text-2xl' onClick={() => { dispatch(delItemToCart(e.product.id)), toast.error("deleting product!!!", { position: 'bottom-left' }) }} ><TiTrash /></p>
                                    </Button>
                                    <Tooltips placement="left" ref={buttonRef}>
                                        <TooltipsContent>Delete to Cart</TooltipsContent>
                                    </Tooltips>
                                </div>
                            </div>
                            <hr />
                        </div>
                    ))
                }
                <div className='flex justify-end my-5'>
                    {cartItems.length > 0 && <Button color='lightBlue' buttonType='filled' size='md' rounded={false} block={false} iconOnly={false} ripple="light" onClick={() => setShowModal(true)}>Ordered</Button>}
                </div>
                <form onSubmit={handleSubmit((data) => OrderShop(data))}>
                    <Modal size="lg" active={showModal} toggler={() => setShowModal(false)} className='p-10'>
                        <ModalHeader toggler={() => setShowModal(false)}>
                            <p>Welcome to RB shopping</p>
                        </ModalHeader>
                        <ModalBody>
                            <div className="flex flex-col items-center xs:w-full md:w-96">
                                <div className='w-full'>
                                    <p className='mb-2'>Please enter your name</p>
                                    <Controller
                                        control={control}
                                        name='name'
                                        render={({ field: { onChange, onBlur } }) => (
                                            <Input
                                                onChange={onChange}
                                                onBlur={onBlur}
                                                type="text"
                                                color="lightBlue"
                                                size="sm"
                                                outline={true}
                                                placeholder="Name"
                                            />
                                        )}
                                    />
                                    <p className='text-red-500'>{errors.name?.message}</p>
                                </div>
                                <div className='w-full mt-4'>
                                    <p className='mb-2'>Please enter your phone number</p>
                                    <Controller
                                        control={control}
                                        name='phone'
                                        render={({ field: { onChange, onBlur } }) => (
                                            <Input
                                                onChange={onChange}
                                                onBlur={onBlur}
                                                type="text"
                                                color="lightBlue"
                                                size="sm"
                                                outline={true}
                                                placeholder="Phone Number"
                                            // value='+9936'
                                            />
                                        )}
                                    />
                                    <p className='text-red-500'>{errors.phone?.message}</p>
                                </div>
                                <div className='w-full mt-4'>
                                    <p className='mb-2'>Address of delivery</p>
                                    <Controller
                                        control={control}
                                        name='address'
                                        render={({ field: { onChange, onBlur } }) => (
                                            <Textarea
                                                onChange={onChange}
                                                onBlur={onBlur}
                                                color="lightBlue"
                                                size="sm"
                                                outline={true}
                                                placeholder="Address of delivery"
                                            />
                                        )}
                                    />
                                    <p className='text-red-500'>{errors.address?.message}</p>
                                </div>
                            </div>
                        </ModalBody>
                        <ModalFooter>
                            <div className='flex w-full'>
                                <Button color='lightBlue' value='submit' name='submit' type='submit' buttonType='filled' size='md' rounded={false} block={false} iconOnly={false} ripple="light" className='w-full mt-3'>Order</Button>
                            </div>
                        </ModalFooter>
                        <div className='mx-10 text-center mt-3 text-red-500 text-xs'>
                            If you give the wrong address, <br /> you will be prosecuted !!!
                        </div>
                    </Modal>
                </form>
            </div>
        </div>
    )

}
